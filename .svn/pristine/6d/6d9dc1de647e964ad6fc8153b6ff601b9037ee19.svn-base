<?php

namespace backend\controllers;

use Yii;
use backend\models\Job;
use backend\models\JobSearch;
use yii\web\Controller;
use yii\web\NotFoundHttpException;
use yii\filters\VerbFilter;
use backend\models\Department;

/**
 * JobController implements the CRUD actions for Job model.
 */
class JobController extends BaseController
{	
    public function behaviors()
    {
        return [
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'delete' => ['post'],
                ],
            ],
        ];
    }

    /**
     * Lists all Job models.
     * @return mixed
     */
    public function actionIndex()
    {	p($_REQUEST['msg']);
    
    	// 取出筛选条件
    	$con = [];
    	list($depart_id,$depart_name) = isset(Yii::$app->request->queryParams['sel_con']['depart']) ? explode('-', Yii::$app->request->queryParams['sel_con']['depart']) : null;
    	$depart_id = $depart_id>0 ? $depart_id : 0;
    
    	// 获取指定部门下的所有子部门
    	$department = Department::get_departments();
    	$data['department'] = $department;
    	$did = Department::get_childen_department($department,$depart_id);
    	$_GET['JobSearch']['depart_id'] = join(',',$did);
    	
        $searchModel = new JobSearch();
        $dataProvider = $searchModel->search($_GET);
        $dataProvider->pagination = ['pagesize'=>10,'totalCount'=>$dataProvider->totalCount];
		
        // 获取可检索部门
        $con['departs'] = Department::get_con_department($depart_id);
       
        return $this->render('index', [
            'dataProvider' => $dataProvider,
        	'con' => $con,
        	'sel_con' => Yii::$app->request->queryParams['sel_con'],
        	'be_selected' => [
        			'depart'=>['key'=>$depart_id,'name'=>'部门：'.$depart_name],
        			'JobSearch[job_name]'=>['key'=>$_GET['JobSearch']['job_name'],'name'=>'关键字：'.$_GET['JobSearch']['job_name']]
        	],
        	'data' => $data,
        ]);
    }

    /**
     * Displays a single Job model.
     * @param integer $id
     * @return mixed
     */
    public function actionView($id)
    {
        return $this->render('view', [
            'model' => $this->findModel($id),
        ]);
    }

    /**
     * Creates a new Job model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     */
    public function actionCreate()
    {	
        $model = new Job();
        $model->setScenario('create');

        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            return $this->redirect(['index']);
        } else {
            /* return $this->render('index', [
                'model' => $model,
            ]); */
        	
        	return $this->redirect(['index','msg'=>$model->getErrors()]);
        }
    }

    /**
     * Updates an existing Job model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param integer $id
     * @return mixed
     */
    public function actionUpdate($id)
    {
        $model = $this->findModel($id);

        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            return $this->redirect(['view', 'id' => $model->id]);
        } else {
            return $this->render('update', [
                'model' => $model,
            ]);
        }
    }

    /**
     * Deletes an existing Job model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param integer $id
     * @return mixed
     */
    public function actionDelete($id)
    {
        if($this->findModel($id)->delete()){
        	return json_encode(['msg'=>'删除成功','success'=>1]);
        }

        return json_encode(['msg'=>'操作失败，可能原因：存在下属职位','error'=>1]);
    }

    /**
     * Finds the Job model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param integer $id
     * @return Job the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = Job::findOne($id)) !== null) {
            return $model;
        } else {
            throw new NotFoundHttpException('The requested page does not exist.');
        }
    }
}
